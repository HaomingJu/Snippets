snippet once "头文件避免重复" b
#pragma once
endsnippet

snippet main "入口函数" b
int main(int argc, const char* argv[]) {
	${1: TODO}
	return 0;
}
endsnippet

snippet forE "C++循环: 元素版本" b
for(const auto& ele : ${1: Elements}) {
	${2:TODO}
}
endsnippet

snippet forI "C++循环: 索引版本" b
for(size_t index = 0; index < ${1: size}; ++index) {
	${2: TODO}
}
endsnippet

snippet forB "C++循环: 迭代器版本" b
for(const auto& iter = ${1: container}.begin(); iter != $1.end(); ++iter) {
	${2: TODO}
}
endsnippet

snippet cout "标准输出" b
std::cout << ${1: 输出} << std::endl;
endsnippet

snippet template "模板" b
template <typename ${1: Type}>
endsnippet

snippet try "异常" b
try {
	// TODO:
} catch(const std::exception& e) {
	// e.what();
}
endsnippet

snippet lambda "lambda函数" b
[&](${1: 参数}){ ${2: TODO} }
endsnippet

snippet externC "C++包含C头文件" b
#ifdef __cplusplus
#extern "C" {
#endif  //

#include <${1: header_file}>

#ifdef __cplusplus
}
#endif  // #extern "C"
endsnippet

snippet auto "auto类型" b
const auto& ${1: variable} ;
endsnippet

snippet sleep_s "程序暂停n秒" b
// #include <thread>
// #include <chrono>
std::this_thread::sleep_for(std::chrono::seconds(${1: 多少秒}));
endsnippet

snippet sleep_ms "程序暂停n毫秒" b
// #include <thread>
// #include <chrono>
std::this_thread::sleep_for(std::chrono::microseconds(${1: 多少毫秒}));
endsnippet

snippet sleep_us "程序暂停n微秒" b
// #include <thread>
// #include <chrono>
std::this_thread::sleep_for(std::chrono::microseconds(${1: 多少微秒}));
endsnippet

snippet sleep_ns "程序暂停n納秒" b
// #include <thread>
// #include <chrono>
std::this_thread::sleep_for(std::chrono::nanoseconds(${1: 多少微秒}));
endsnippet

snippet pubPCL "[ros]: 要广播PCL点云类型" b
#include <pcl_ros/point_cloud.h>
endsnippet

snippet include_system_head_file "包含头文件" b
#include <${1}>
endsnippet

snippet include_project_head_file "包含头文件" b
#include "${1}"
endsnippet

snippet pbPraserMsg "protobuf反序列化, 反射" b
#include <google/protobuf/descriptor.h>
#include <google/protobuf/dynamic_message.h>
#include <google/protobuf/message.h>

const Descriptor* descriptor = DescriptorPool::generated_pool()->FindMessageTypeByName(msg->topic_name);
const Message* proto_type = MessageFactory::generated_factory()->GetPrototype(descriptor);
Message* message = proto_type->New();
message->ParseFromString(msg->content);
// message->DebugPrintf();
endsnippet

snippet now "当前时间" b
//#include <chrono>
//#include <ctime>
auto time_p = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
tm* now = localtime(&time_p);
endsnippet

snippet rosbag_get_all_topics "获取rosbag包中的所有话题" b
rosbag::Bag bag("foo.bag");
rosbag::View view(bag);
std::vector<const rosbag::ConnectionInfo *> connection_infos = view.getConnections();
for(auto infoPtr : connection_infos) {
	infoPtr->topic;
}
endsnippet


snippet pack "Description" b
#pragma pack(push, 4) // 4字节对齐
#pragma pack(pop) // 恢复默认对齐规则
endsnippet
