snippet cmake "基础结构" b
cmake_minimum_required(VERSION ${1:CMAKE_VERSION})
project(${2: PROJECT_NAME})

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_INSTALL_PREFIX \$\{CMAKE_SOURCE_DIR\}/install)

aux_source_directory(\$\{CMAKE_SOURCE_DIR\} src)
add_executable(\$\{PROJECT_NAME\} \$\{src\})
target_link_libraries(\$\{PROJECT_NAME\})
endsnippet

snippet ros "依赖ROS系统" b
find_package(PkgConfig REQUIRED)
pkg_search_module(ROSCPP REQUIRED IMPORTED_TARGET roscpp)
pkg_search_module(SENSOR_MSGS REQUIRED IMPORTED_TARGET sensor_msgs)
pkg_search_module(STD_MSGS REQUIRED IMPORTED_TARGET std_msgs)
pkg_search_module(TF2_MSGS REQUIRED IMPORTED_TARGET tf2_msgs)

include_directories(\$\{ROSCPP_INCLUDE_DIRS\})

target_link_libraries(
	${1: target_name}
	PkgConfig::ROSCPP
	PkgConfig::SENSOR_MSGS
	PkgConfig::STD_MSGS
	PkgConfig::TF2_MSGS)
endsnippet

snippet boost "解决boost依赖" b
find_package(Boost EXACT REQUIRED COMPONENTS system filesystem thread)
endsnippet

snippet pcl "解决PCL依赖" b
find_package(PCL 1.8 REQUIRED COMPONENTS common io)

# PCL_FOUND: set to 1 if PCL is found, otherwise unset
# PCL_INCLUDE_DIRS: set to the paths to PCL installed headers and the dependency headers
# PCL_LIBRARIES: set to the file names of the built and installed PCL libraries
# PCL_LIBRARY_DIRS: set to the paths to where PCL libraries and 3rd party dependencies reside
# PCL_VERSION: the version of the found PCL
# https://pointclouds.org/documentation/tutorials/using_pcl_pcl_config.html#
endsnippet

snippet eigen "解决Eigen3依赖" b
find_package (Eigen3 3.3 REQUIRED NO_MODULE)

# Eigen3::Eigen
# https://eigen.tuxfamily.org/dox/TopicCMakeGuide.html
endsnippet

snippet install_files "安装文件" b
install(FILES ${1: 待安装文件} DESTINATION ${2: 目标路径})
endsnippet

snippet install_targets "安装目标文件" b
install(TARGETS ${1: 待安装文件} LIBRARY DESTINATION ${2: 目标路径})
endsnippet



snippet setGlobalVar "设定全局变量" b
set(${1: GLOBAL_VAR} \$\{VALUE\} CACHE INTERNAL "")
endsnippet

snippet proto_gen "cmake中对proto定义文件进行编译" b
find_package(Protobuf REQUIRED)
include_directories(\$\{Protobuf_INCLUDE_DIRS\})
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${1: proto文件})
protobuf_generate_python(PROTO_PY ${1: proto文件})
add_library(recordMsg STATIC \$\{PROTO_SRCS\} \$\{PROTO_HDRS\})
endsnippet


snippet pkg_search_module "pkg查找依赖包" b
find_package(PkgConfig REQUIRED)
pkg_search_module(OPENCV REQUIRED IMPORTED_TARGET opencv-3.3.1-dev opencv)
endsnippet


snippet CUDA "findCUDA" b
find_package(CUDA)

message("CUDA_VERSION: \$\{CUDA_VERSION\}")
message("CUDA_VERSION_STRING: \$\{CUDA_VERSION_STRING\}")

# New in version 3.6: Whether a short float (float16, fp16) is supported.
message("CUDA_HAS_FP16: \$\{CUDA_HAS_FP16\}") 

# Path to the CUDA Toolkit (defined if not set).
message("CUDA_TOOLKIT_ROOT_DIR: \$\{CUDA_TOOLKIT_ROOT_DIR\}")

# Path to the CUDA SDK
message("CUDA_SDK_ROOT_DIR: \$\{CUDA_SDK_ROOT_DIR\}")

# Include directory for cuda headers. Added automatically for cuda_add_executable() and cuda_add_library().
message("CUDA_INCLUDE_DIRS: \$\{CUDA_INCLUDE_DIRS\}")

# Cuda RT library.
message("CUDA_LIBRARIES: \$\{CUDA_LIBRARIES\}")

# Device or emulation library for the Cuda FFT implementation (alternative to cuda_add_cufft_to_target() macro)
message("CUDA_CUFFT_LIBRARIES: \$\{CUDA_CUFFT_LIBRARIES\}")

# Device or emulation library for the Cuda BLAS implementation (alternative to cuda_add_cublas_to_target() macro).
message("CUDA_CUBLAS_LIBRARIES: \$\{CUDA_CUBLAS_LIBRARIES\}")

# Statically linkable cuda runtime library. Only available for CUDA version 5.5+.
message("CUDA_cudart_static_LIBRARY: \$\{CUDA_cudart_static_LIBRARY\}")

# New in version 3.7: Device runtime library. Required for separable compilation.
message("CUDA_cudadevrt_LIBRARY: \$\{CUDA_cudadevrt_LIBRARY\}")

# CUDA Profiling Tools Interface library. Only available for CUDA version 4.0+.
message("CUDA_cupti_LIBRARY: \$\{CUDA_cupti_LIBRARY\}")

# CUDA Random Number Generation library. Only available for CUDA version 3.2+.
message("CUDA_curand_LIBRARY: \$\{CUDA_curand_LIBRARY\}")

# New in version 3.2: CUDA Direct Solver library. Only available for CUDA version 7.0+.
message("CUDA_cusolver_LIBRARY: \$\{CUDA_cusolver_LIBRARY\}")

#CUDA Sparse Matrix library. Only available for CUDA version 3.2+.
message("CUDA_cusparse_LIBRARY: \$\{CUDA_cusparse_LIBRARY\}")

# NVIDIA Performance Primitives lib. Only available for CUDA version 4.0+.
message("CUDA_npp_LIBRARY: \$\{CUDA_npp_LIBRARY\}")

# NVIDIA Performance Primitives lib (core). Only available for CUDA version 5.5+.
CUDA_nppc_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 5.5 - 8.0.
CUDA_nppi_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppial_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppicc_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0 - 10.2. Replaced by nvjpeg.
CUDA_nppicom_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppidei_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppif_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppig_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppim_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppist_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppisu_LIBRARY

# NVIDIA Performance Primitives lib (image processing). Only available for CUDA version 9.0.
CUDA_nppitc_LIBRARY

# NVIDIA Performance Primitives lib (signal processing). Only available for CUDA version 5.5+.
CUDA_npps_LIBRARY

# CUDA Video Encoder library. Only available for CUDA version 3.2+. Windows only.
CUDA_nvcuvenc_LIBRARY

# CUDA Video Decoder library. Only available for CUDA version 3.2+. Windows only.
CUDA_nvcuvid_LIBRARY

# New in version 3.16: NVIDA CUDA Tools Extension library. Available for CUDA version 5+.
CUDA_nvToolsExt_LIBRARY

# New in version 3.16: NVIDA CUDA OpenCL library. Available for CUDA version 5+.
CUDA_OpenCL_LIBRARY

# https://cmake.org/cmake/help/latest/module/FindCUDA.html
endsnippet

snippet EigenERROR "修复编译时error: static assertion failed: OBJECT_ALLOCATED_ON_STACK_IS_TOO_BIG" b
add_compile_definitions(EIGEN_STACK_ALLOCATION_LIMIT=0)
endsnippet
