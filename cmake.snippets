snippet cmake "基础结构" b
cmake_minimum_required(VERSION ${1:CMAKE_VERSION})
project(${2: PROJECT_NAME})

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_INSTALL_PREFIX \$\{CMAKE_SOURCE_DIR\}/install)

aux_source_directory(\$\{CMAKE_SOURCE_DIR\} src)
add_executable(\$\{PROJECT_NAME\} \$\{src\})
target_link_libraries(\$\{PROJECT_NAME\})
endsnippet

snippet ros "依赖ROS系统" b
find_package(PkgConfig REQUIRED)
pkg_search_module(ROSCPP REQUIRED IMPORTED_TARGET roscpp)
pkg_search_module(SENSOR_MSGS REQUIRED IMPORTED_TARGET sensor_msgs)
pkg_search_module(STD_MSGS REQUIRED IMPORTED_TARGET std_msgs)
pkg_search_module(TF2_MSGS REQUIRED IMPORTED_TARGET tf2_msgs)

include_directories(\$\{ROSCPP_INCLUDE_DIRS\})

target_link_libraries(
	${1: target_name}
	PkgConfig::ROSCPP
	PkgConfig::SENSOR_MSGS
	PkgConfig::STD_MSGS
	PkgConfig::TF2_MSGS)
endsnippet

snippet boost "解决boost依赖" b
find_package(Boost EXACT REQUIRED COMPONENTS system filesystem thread)
endsnippet

snippet pcl "解决PCL依赖" b
find_package(PCL 1.8 REQUIRED COMPONENTS common io)

# PCL_FOUND: set to 1 if PCL is found, otherwise unset
# PCL_INCLUDE_DIRS: set to the paths to PCL installed headers and the dependency headers
# PCL_LIBRARIES: set to the file names of the built and installed PCL libraries
# PCL_LIBRARY_DIRS: set to the paths to where PCL libraries and 3rd party dependencies reside
# PCL_VERSION: the version of the found PCL
# https://pointclouds.org/documentation/tutorials/using_pcl_pcl_config.html#
endsnippet

snippet eigen "解决Eigen3依赖" b
find_package (Eigen3 3.3 REQUIRED NO_MODULE)

# Eigen3::Eigen
# https://eigen.tuxfamily.org/dox/TopicCMakeGuide.html
endsnippet

snippet install_files "安装文件" b
install(FILES ${1: 待安装文件} DESTINATION ${2: 目标路径})
endsnippet

snippet install_targets "安装目标文件" b
install(TARGETS ${1: 待安装文件} LIBRARY DESTINATION ${2: 目标路径})
endsnippet

snippet install_deps "安装目标文件的依赖库" b
install(TARGETS ${TARGET_NAME}
	RUNTIME_DEPENDENCY_SET PkgConfig::UNWIND
	LIBRARY DESTINATION lib)
install(RUNTIME_DEPENDENCY_SET PkgConfig::UNWIND)
# 将安装所有依赖
endsnippet

snippet install_dep "有选择性地安装目标文件的依赖库" b
install(CODE [[
    file(GET_RUNTIME_DEPENDENCIES
    LIBRARIES libjian.so
    RESOLVED_DEPENDENCIES_VAR _r_deps)
    message("----------_r_deps: ${_r_deps}")
    foreach(ele ${_r_deps})
        string(REGEX MATCH ".*libunwind.*" ABOUT_UNWIND ${ele})
        if(ABOUT_UNWIND)
            file(INSTALL
                DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
                TYPE SHARED_LIBRARY
                FOLLOW_SYMLINK_CHAIN
                FILES "${ele}")
        endif()
    endforeach(ele ${_r_deps})
]])

endsnippet




snippet setGlobalVar "设定全局变量" b
set(${1: GLOBAL_VAR} \$\{VALUE\} CACHE INTERNAL "")
endsnippet

snippet proto_gen "cmake中对proto定义文件进行编译" b
find_package(Protobuf REQUIRED)
include_directories(\$\{Protobuf_INCLUDE_DIRS\})
protobuf_generate_cpp(PROTO_SRCS PROTO_HDRS ${1: proto文件})
protobuf_generate_python(PROTO_PY ${1: proto文件})
add_library(recordMsg STATIC \$\{PROTO_SRCS\} \$\{PROTO_HDRS\})
endsnippet


snippet pkg_search_module "pkg查找依赖包" b
find_package(PkgConfig REQUIRED)
pkg_search_module(OPENCV REQUIRED IMPORTED_TARGET GLOBAL opencv-3.3.1-dev opencv)
pkg_search_module(OPENCV QUIET IMPORTED_TARGET GLOBAL opencv-3.3.1-dev opencv)
endsnippet


snippet CUDA "findCUDA" b
find_package(CUDA)
message("CUDA_VERSION: \$\{CUDA_VERSION\}")
message("CUDA_VERSION_STRING: \$\{CUDA_VERSION_STRING\}")
# https://cmake.org/cmake/help/latest/module/FindCUDA.html
endsnippet

snippet EigenERROR "修复编译时error: static assertion failed: OBJECT_ALLOCATED_ON_STACK_IS_TOO_BIG" b
add_compile_definitions(EIGEN_STACK_ALLOCATION_LIMIT=0)
endsnippet

snippet abi "gcc4.9/5.0版本差异" b
-D_GLIBCXX_USE_CXX11_ABI=0
endsnippet


